input {
	file {
		type => "HA"
		path => "D:/ELK/haproxy.log.5.4"
		start_position => "beginning"
	}
}

filter {
	grok {
		match => [
			"message", "%{SYSLOGTIMESTAMP:syslog_timestamp} %{IPORHOST:syslog_server} %{SYSLOGPROG}: %{IP:client_ip}:%{INT:client_port} \[%{HAPROXYDATE:accept_date}\] %{NOTSPACE:frontend_name} %{NOTSPACE:backend_name}/%{NOTSPACE:server_name} %{INT:time_request}/%{INT:time_queue}/%{INT:time_backend_connect}/%{INT:time_backend_response}/%{NOTSPACE:time_duration} %{INT:http_status_code} %{NOTSPACE:bytes_read} %{DATA:captured_request_cookie} %{DATA:captured_response_cookie} %{NOTSPACE:termination_state} %{INT:actconn}/%{INT:feconn}/%{INT:beconn}/%{INT:srvconn}/%{NOTSPACE:retries} %{INT:srv_queue}/%{INT:backend_queue} (\{%{HAPROXYCAPTUREDREQUESTHEADERS}\})?( )?(\{%{HAPROXYCAPTUREDRESPONSEHEADERS}\})?( )?\"(<BADREQ>|(%{WORD:http_verb} (%{URIPROTO:http_proto}://)?(?:%{USER:http_user}(?::[^@]*)?@)?(?:%{URIHOST:http_host})?(?:%{URIPATHPARAM:http_request})?( HTTP/%{NUMBER:http_version})?))?\"" 
		]
	}
	
	date {
		match => ["accept_date", "dd/MMM/yyyy:HH:mm:ss.SSS"]
		target => "event_time"
	}
	
	mutate {
        convert => {
            "client_port" => "integer"
			"haproxy_hour" => "integer"
			"haproxy_minute" => "integer"
        }
    }
}

# output logs to console and to elasticsearch
output {
    stdout { codec => rubydebug }
	
	if [haproxy_hour] in [20, 21, 22] {	
		elasticsearch { hosts => ["localhost:9200"] }
	}
}
